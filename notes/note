Swagger Példa:
https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v3.0/petstore.yaml

YAML szerkezet:
https://learnxinyminutes.com/docs/yaml/

SwaggerHub editor:
ctrl+space: előhozza egy property választható opcióit

Részletes séma leírás adott verzióhz:
https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md

Json Schema (az OpenApi schema ennek a kiterjesztése, ez az alapja):
https://json-schema.org/understanding-json-schema/index.html

Jegyzetek:
 - Enum csak azonos adattípusba tartozó elemeket tartalmazhat.
 - Components-re mutató referenica lehet:
    -> az adott .yaml-ben lévő componentsre mutató
    -> lehet külső file a tendszerben, ilyenkor a .yaml útvonalából indulunk ki, ha azzal egy szinten van akkor elég a file nevét megadni
    -> teljes url is megadható, ha pélfául egy github projektben lévő másik componentset akarunk használni
 - Parameters:
    -> path: /item/{itemId}; mindig kötelező és a swagger neve azonos kell legyen a path-ban lévő névvel
    -> query: /item?id=###
    -> a parameters listát vár ezért '-' jelekkel kezdjük a blokkokat
 - Description formázás:
    -> *text* - italic/dőlt
    -> **text** - bold/félkövér
 - Tags:
    -> ez egy string lista, egy endpoint több tag alá is tartozhat
 - OperationId:
    -> unique kell legyen az egész dokumentumban
    -> case sensitive
 - POST operation esetén a létrejövő objektum útvonalát bele szokás tenni a response headerjébe, hogy egyből elérhető legyen
 - readOnly: paraméter tulajdonság, ha request-ben hasznájuk az objectet aminek a paramétere readOnly=true az nem fog megjelenni,
   vagyis nem kérjük a request body-ban, de a response-ban megjelenik. Ez akkor is igaz, ha a required=true, ilyenkor csak a response-ra
   vonatkozik.
 - writeOnly: az előző fordítottja, a response-ban nem lesz benne, de a request kérni fogja (például jelszavaknál használják)



Gyors billentyű:
  shift + tab --> visszafelé tab