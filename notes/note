Saját gyakorló elérése:
https://app.swaggerhub.com/apis/FiglerReNi/OpenApiCourse/1.0#/ (Github felhasználóhoz tartozó swagger)

Swagger Példa:
https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v3.0/petstore.yaml

YAML szerkezet:
https://learnxinyminutes.com/docs/yaml/

SwaggerHub editor:
ctrl+space: előhozza egy property választható opcióit

Részletes séma leírás adott verzióhz:
https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md

Json Schema (az OpenApi schema ennek a kiterjesztése, ez az alapja):
https://json-schema.org/understanding-json-schema/index.html

Callbacks leírás
https://swagger.io/docs/specification/callbacks/

Jegyzetek:
 - Enum csak azonos adattípusba tartozó elemeket tartalmazhat.
 - Components-re mutató referenica lehet:
    -> az adott .yaml-ben lévő componentsre mutató
    -> lehet külső file a tendszerben, ilyenkor a .yaml útvonalából indulunk ki, ha azzal egy szinten van akkor elég a file nevét megadni
    -> teljes url is megadható, ha pélfául egy github projektben lévő másik componentset akarunk használni
 - Parameters:
    -> path: /item/{itemId}; mindig kötelező és a swagger neve azonos kell legyen a path-ban lévő névvel
    -> query: /item?id=###
    -> a parameters listát vár ezért '-' jelekkel kezdjük a blokkokat
 - Description formázás:
    -> *text* - italic/dőlt
    -> **text** - bold/félkövér
 - Tags:
    -> ez egy string lista, egy endpoint több tag alá is tartozhat
 - OperationId:
    -> unique kell legyen az egész dokumentumban
    -> case sensitive
 - POST operation esetén a létrejövő objektum útvonalát bele szokás tenni a response headerjébe, hogy egyből elérhető legyen
 - readOnly: paraméter tulajdonság, ha request-ben hasznájuk az objectet aminek a paramétere readOnly=true az nem fog megjelenni,
   vagyis nem kérjük a request body-ban, de a response-ban megjelenik. Ez akkor is igaz, ha a required=true, ilyenkor csak a response-ra
   vonatkozik.
 - writeOnly: az előző fordítottja, a response-ban nem lesz benne, de a request kérni fogja (például jelszavaknál használják)
 - válaszok általában:
     -> GET esetén 200 és van body
     -> POST esetén 201 és headers Location-ba az útvonal
     -> PUT esetén 204
 - válaszok hiba esetén:
     -> 404 Not Found
        - path param id miatt szoktuk: GET, PUT, DELETE
     -> 409 Conflict
        - PUT, POST
     -> 400 Bad Request
        - request body miatt szoktuk: PUT, POST
 -webhooks/calbacks:
     Amikor csinálunk egy post-ot, például egy rendelést, akkor a request body-ban kérünk egy url útvonalat ahhoz a rendszerhez ahová majd a sikeres post után szeretnénk üzenetet küldeni.
     Jelen esetben például egy státusz váltásról szólót egy másik rendszerbe.
     A kapott linket használjuk a callback során, lehet ez is egy post például egy request body-val, mondjuk átküldjük a rendelés során létrejött id-t és hogy milyen státusz változás történt.
     A WebHook egy olyan automatikus üzenet a webáruháztól például, egy külső rendszer felé, amely olyan események hatására váltódhat ki, mint például egy rendelés feladása,
     egy rendelés állapotának megváltozása, hírlevél feliratkozás, hírlevél leiratkozás vagy hírlevél feliratkozó adatmódosítás.
Gyors billentyű:
  shift + tab --> visszafelé tab