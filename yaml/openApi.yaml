openapi: 3.0.2
info:
  version: '1.0'
  title: OpenApi Course
  description: Specification for OpenApi Course
  termsOfService: http://example.com/terms/
  contact:
    name: FReni
    email: example@example.hu
    url: https://www.example.com/support/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA Server
  - url: https://prod.example.com
    description: Production Server
paths:
  /app/customers:
    get:
      tags:
        - Customers
      summary: List of Customers
      description: Get a list of **Customers** in the system
      parameters:
        - $ref: "#/components/parameters/PageNumberParameter"
        - $ref: "#/components/parameters/PageSizeParameter"
      responses:
        '200':
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagedList"
    put:
      tags:
        - Customers
      summary: Modify of Customers
      description: Modify *all* **Customers** at the same time
      responses:
        '200':
          description: Modify of Customers
  /app/customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Customer by Id
      description: Get details of **Customer** by id
      parameters:
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
  /app/beers:
    get:
      tags:
        - Beers
      summary: List of Beers
      description: Get a list of **Beers** in the system.
      parameters:
        - $ref: "#/components/parameters/PageNumberParameter"
        - $ref: "#/components/parameters/PageSizeParameter"
      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
        '404':
          description: No Beers Found
  /app/beers/{beerId}:
    get:
      tags:
        - Beers
      summary: Beer by Id
      description: Get details of **Beer** by id
      parameters:
        - name: beerId
          in: path
          description: Beer Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Beer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Beer"
components:
  parameters:
    PageNumberParameter:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParameter:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        default: 25
  schemas:
    Address:
      type: object
      properties:
        line:
          type: string
          example: Kinizsi ut 2/B
        city:
          type: string
          example: Buda√∂rs
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 Letter State Code
          # enum: [AL, AK, AZ, AR, CA]
          enum:
            - AL
            - AK
            - AZ
            - AR
            - CA
        zipCode:
          type: integer
          example: 2040
    Customer:
      type: object
      description: Customer Object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          example: Renata
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Figler
        address:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Customers
      items:
        $ref: "#/components/schemas/Customer"
    CustomerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/CustomerList"
    Brewery:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
    Beer:
      type: object
      description: Beer Object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        style:
          type: string
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
        upc:
          type: string
        price:
          type: number
          format: float
        quantity:
          type: integer
          format: int32
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Beers
      items:
        $ref: "#/components/schemas/Beer"
    BeerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/BeerList"
    PagedResponse:
      type: object
      properties:
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
            offset:
              type: integer
              format: int32
            pageNumber:
              type: integer
              format: int32
            pageSize:
              type: integer
              format: int32
            paged:
              type: boolean
            unpaged:
              type: boolean
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32